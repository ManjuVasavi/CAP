//Bottom view of binary tree

public class Solution {
    public static ArrayList<Integer> bottomView(BinaryTreeNode root) {
        class queNew{
            BinaryTreeNode node;
            int data;
            queNew(BinaryTreeNode node,int data){
                this.data=data;
                this.node=node;
            }
        }
         ArrayList<Integer> ar = new ArrayList<>();
         if(root==null){
             return ar;
         }
         //treemap first consists offset and then value
         TreeMap<Integer,Integer> tm = new TreeMap<>();
         Queue<queNew> q = new LinkedList<>();
         q.add(new queNew(root,0));
         while(!q.isEmpty()){
             int size = q.size();
             for(int i=1;i<=size;i++){
                 queNew curr = q.poll();
                 //add values to treemap
                 tm.put(curr.data,curr.node.val);
                 if(curr.node.left!=null){
                     q.add(new queNew(curr.node.left,curr.data-1));
                 }
                 if(curr.node.right!=null){
                     q.add(new queNew(curr.node.right,curr.data+1));
                 }
             }
         }
         for(Map.Entry<Integer,Integer> en: tm.entrySet()){
             ar.add(en.getValue());
         }
         return ar;
    }
}

//Binary search tree iterator

class BSTIterator {
    public void pushAll(TreeNode t){
        while(t!=null){
            st.push(t);
            t=t.left;
        }
    }
    Stack<TreeNode> st = new Stack<>();
    public BSTIterator(TreeNode root) {
        pushAll(root);
    }
    
    public int next() {
        TreeNode curr = st.pop();
        pushAll(curr.right);
        return curr.val;
    }
    
    public boolean hasNext() {
        return !st.isEmpty();
    }
}

//LCA of BST

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null){
            return root;
        }
        if(root.val>p.val && root.val>q.val){
            return lowestCommonAncestor(root.left,p,q);
        }
        else if(root.val<p.val && root.val<q.val){
             return lowestCommonAncestor(root.right,p,q);
        }
        else{
            return root;
        }
    }
}
