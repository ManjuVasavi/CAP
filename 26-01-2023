//Sum root to leaf numbers

class Solution {
    int ans = 0;
    public void result(TreeNode root, int value){
        //preorder
        if(root==null){
            return;
        }
        value=value*10+root.val;
        if(root.left==null && root.right==null){
            ans+=value;
        }
        result(root.left,value);
        result(root.right,value);
    }
    public int sumNumbers(TreeNode root) {
        result(root,0);
        return ans;
    }
}
 //Path sum

class Solution {
    public boolean result(TreeNode root, int targetSum, int currSum){
        //preorder
        if(root==null){
            return false;
        }
        currSum+=root.val;
        if(root.left==null && root.right==null){
            if(currSum==targetSum){
                return true;
            }
        }
        return result(root.left, targetSum, currSum) || result(root.right, targetSum, currSum);
    }
    public boolean hasPathSum(TreeNode root, int targetSum) {
        boolean b = result(root, targetSum, 0);
        return b;
    }
}

//Diameter of binary tree

class Solution {
    int diameter=0;
    public int result(TreeNode root){
        //postorder
        if(root==null){
            return 0;
        }
        int l = result(root.left);
        int r = result(root.right);
        diameter = Math.max(diameter, l+r);
        return Math.max(l,r)+1;
    }
    public int diameterOfBinaryTree(TreeNode root) {
        result(root);
        return diameter;
    }
}

//Balanced binary tree

class Solution {
    boolean b = true;
    public int result(TreeNode root){
        if(root==null){
            return 0;
        }
        int l = result(root.left);
        int r = result(root.right);
        if(Math.abs(l-r)>1){
            b=false;
        }
        return Math.max(l,r)+1;
    }
    public boolean isBalanced(TreeNode root) {
        if(root==null){
            return true;
        }
        result(root);
        return b;
    }
}

//Sum of left leaves

class Solution {
    int sum=0;
    public int sumOfLeftLeaves(TreeNode root) {
        if(root==null){
            return 0;
        }
        if(root.left!=null){
            if(root.left.left==null && root.left.right==null){
            sum+=root.left.val;
            }
        }
        sumOfLeftLeaves(root.left);
        sumOfLeftLeaves(root.right);
        return sum;
    }
}

//Binary tree paths

class Solution {
    List<String> l = new ArrayList<>();
    public void result(TreeNode root, String value){
        if(root==null){
            return;
        }
        //preorder
        if(root.left==null && root.right==null){
            value+=Integer.toString(root.val);
            l.add(value);
        }
        else{
            value+=Integer.toString(root.val)+"->";
        }
        result(root.left,value);
        result(root.right,value);
    }
    public List<String> binaryTreePaths(TreeNode root) {
        String start="";
        result(root,start);
        return l;
    }
}
