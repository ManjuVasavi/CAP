//Recover BST

class Solution {
    TreeNode prev;
    TreeNode first;
    TreeNode middle;
    TreeNode last;
    public void check(TreeNode root){
        if(root==null){
            return;
        }
        check(root.left);
        if(root.val<prev.val){
            if(first==null){
                first = prev;
                middle = root;
            }
            else{
                last = root;
            }
        }
        prev = root;
        check(root.right);
    }
    public void recoverTree(TreeNode root) {
        prev = new TreeNode(Integer.MIN_VALUE);
        check(root);
        if(first!=null && last!=null){
            int temp = first.val;
            first.val = last.val;
            last.val = temp;
        }
        else if(first!=null && middle!=null){
            int temp = first.val;
            first.val = middle.val;
            middle.val = temp;
        }
    }
}

//Flatten binary tree to linkedlist

class Solution {
    ArrayList<Integer> arr = new ArrayList<>();
    public void check(TreeNode root){
        //preorder traversal
        if(root==null){
            return;
        }
        arr.add(root.val);
        check(root.left);
        check(root.right);
    }
    public void flatten(TreeNode root) {
        check(root);
        for(int i=1;i<arr.size();i++){
            root.left = null;
            root.right = new TreeNode(arr.get(i));
            root = root.right;
        }
    }
}
