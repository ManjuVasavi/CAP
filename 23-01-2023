//Longest Substring Without Repeating Characters
 class Solution {
    public int lengthOfLongestSubstring(String s) {
        String res = "";
        int count=0;
        for(int i=0;i<s.length();i++){
            if(!res.contains(s.substring(i,i+1))){
                res+=s.substring(i,i+1);
            }
            else{
                int index = res.indexOf(s.substring(i,i+1));
                String str = res.substring(index+1,res.length());
                res="";
                res=str+s.substring(i,i+1);
            }
            int max= res.length();
            if(max>count){
                count=max;
            }
        }
        return count;
    }
}

//First Unique Character in a String

class Solution {
    public int firstUniqChar(String s) {
        int res=-1;
        HashMap<String, Integer> hm = new HashMap<>();
        for(int i=0;i<s.length();i++){
            if(!hm.containsKey(s.substring(i,i+1))){
                hm.put(s.substring(i,i+1),0);
            }
            hm.put(s.substring(i,i+1),hm.get(s.substring(i,i+1))+1);
        }
        for(int i=0;i<s.length();i++){
            if(hm.get(s.substring(i,i+1))==1){
                res = i;
                break;
            }
        }
        return res;
    }
}
