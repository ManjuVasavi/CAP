//Construct BST from preorder traversal

class Solution {
    int preIndex=0;
    public TreeNode check(int[] preorder,int[] inorder,int inst,int inen,HashMap<Integer,Integer> hm){
        if(preIndex>preorder.length){
            return null;
        }
        if(inst>inen){
            return null;
        }
        int Value = hm.get(preorder[preIndex]);
        TreeNode tree = new TreeNode(preorder[preIndex++]);
        //go left and repeat same process
        tree.left = check(preorder,inorder,inst,Value-1,hm);
        //go right and repeat same process
        tree.right = check(preorder,inorder,Value+1,inen,hm);
        return tree;
    }
    public TreeNode bstFromPreorder(int[] preorder) {
        int[] inorder = new int[preorder.length];
        int j=0;
        for(int i=0;i<preorder.length;i++){
            inorder[j++]=preorder[i];
        }
        Arrays.sort(inorder);
        //place the index of inorder elements into hashmap
        HashMap<Integer,Integer> hm = new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            if(!hm.containsKey(inorder[i])){
                hm.put(inorder[i],i);
            }
        }
        //call function
        return check(preorder,inorder,0,inorder.length-1,hm);
    }
}

//convert BST to greater tree

class Solution {
    //reverse inorder
    int sum=0;
    public void check(TreeNode root){
        if(root==null){
            return;
        }
        check(root.right);
        System.out.println(sum);
        sum+=root.val;
        root.val=sum;
        check(root.left);
    }
    public TreeNode convertBST(TreeNode root) {
        check(root);
        return root;
    }
}

//Increasing order search tree

class Solution {
    TreeNode t = null;
    TreeNode curr = null;
    public void check(TreeNode root){
        if(root==null){
            return;
        }
        check(root.left);
        if(t==null){
            t=root;
            curr=root;
        }
        else{
            curr.right=root;
            curr=curr.right;
            curr.left=null;
        }
        check(root.right);
    }
    public TreeNode increasingBST(TreeNode root) {
        check(root);
        return t;
    }
}
