//Construct BST from preorder traversal

class Solution {
    int preIndex=0;
    public TreeNode check(int[] preorder,int[] inorder,int inst,int inen,HashMap<Integer,Integer> hm){
        if(preIndex>preorder.length){
            return null;
        }
        if(inst>inen){
            return null;
        }
        int Value = hm.get(preorder[preIndex]);
        TreeNode tree = new TreeNode(preorder[preIndex++]);
        //go left and repeat same process
        tree.left = check(preorder,inorder,inst,Value-1,hm);
        //go right and repeat same process
        tree.right = check(preorder,inorder,Value+1,inen,hm);
        return tree;
    }
    public TreeNode bstFromPreorder(int[] preorder) {
        int[] inorder = new int[preorder.length];
        int j=0;
        for(int i=0;i<preorder.length;i++){
            inorder[j++]=preorder[i];
        }
        Arrays.sort(inorder);
        //place the index of inorder elements into hashmap
        HashMap<Integer,Integer> hm = new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            if(!hm.containsKey(inorder[i])){
                hm.put(inorder[i],i);
            }
        }
        //call function
        return check(preorder,inorder,0,inorder.length-1,hm);
    }
}

//Flood fill

class Solution {
    public void check(int[][] image, int sr, int sc, int color, int oldcolour){
        int rows = image.length;
        int columns = image[0].length;
        if((sr>=0 && sr<rows) && (sc>=0 && sc<columns) && (image[sr][sc]==oldcolour) && (image[sr][sc]!=color)){
            image[sr][sc]=color;
            check(image,sr-1,sc,color,oldcolour);
            check(image,sr,sc+1,color,oldcolour);
            check(image,sr+1,sc,color,oldcolour);
            check(image,sr,sc-1,color,oldcolour);
        }
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int oldcolour = image[sr][sc];
        check(image,sr,sc,color,oldcolour);
        return image;
    }
}
