//BFS of a graph

class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        ArrayList<Integer> arr = new ArrayList<>();
        boolean[] visited = new boolean[adj.size()];
        Queue<Integer> q = new LinkedList<>();
        q.add(0);
        visited[0]=true;
        while(!q.isEmpty()){
            int value = q.poll();
            arr.add(value);
            for(int neigh: adj.get(value)){
                if(visited[neigh]==false){
                    visited[neigh]=true;
                    q.add(neigh);
                }
            }
        }
        return arr;
    }
}

//DFS of a graph

class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public void dfs(int vert, ArrayList<Integer> arr,boolean[] vis,ArrayList<ArrayList<Integer>> adj){
        vis[vert]=true;
        arr.add(vert);
        for(int neigh: adj.get(vert)){
            if(vis[neigh]==false){
                dfs(neigh,arr,vis,adj);
            }
        }
    }
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        ArrayList<Integer> arr = new ArrayList<>();
        boolean[] vis = new boolean[V+1];
        dfs(0,arr,vis,adj);
        return arr;
    }
}

//Number of provinces

class Solution {
    public void dfs(int value, ArrayList<ArrayList<Integer>> adj, Integer[] visited){
        visited[value]=1;
        for(int neigh: adj.get(value)){
            if(visited[neigh]==0){
                dfs(neigh,adj,visited);
            }
        }
    }
    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(isConnected[i][j]==1 && i!=j){
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }
        //after creating adjacency list perform dfs traversal
        int count=0;
        Integer[] visited = new Integer[n];
        Arrays.fill(visited,0);
        for(int i=0;i<n;i++){
            if(visited[i]==0){
                count++;
                dfs(i,adj,visited);
            }
        }
        return count;
    }
}
