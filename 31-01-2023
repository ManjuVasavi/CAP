//Increasing order search tree

class Solution {
    TreeNode t = null;
    TreeNode curr = null;
    public void check(TreeNode root){
        if(root==null){
            return;
        }
        check(root.left);
        if(t==null){
            t=root;
            curr=root;
        }
        else{
            curr.right=root;
            curr=curr.right;
            curr.left=null;
        }
        check(root.right);
    }
    public TreeNode increasingBST(TreeNode root) {
        check(root);
        return t;
    }
}

//Find largest value in each tree row

class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> l = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        if(root==null){
            return l;
        }
        q.add(root);
        while(!q.isEmpty()){
            int size = q.size();
            int max=Integer.MIN_VALUE;
            for(int i=1;i<=size;i++){
                TreeNode curr = q.poll();
                max=Math.max(max,curr.val);
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
            }
            l.add(max);
        }
        return l;
    }
}

//Construct binary tree from preorder and inorder traversal

class Solution {
    int preIndex=0;
    public TreeNode check(int[] pre, int[] in,int inStart,int inEnd,HashMap<Integer,Integer> hm){
        if(inStart>inEnd){
            return null;
        }
        if(preIndex>pre.length-1){
            return null;
        }
        // System.out.println(preIndex);
        int inValue = hm.get(pre[preIndex]);
        TreeNode t = new TreeNode(pre[preIndex++]);
        // System.out.println(preIndex);
        t.left=check(pre,in,inStart,inValue-1,hm);
        t.right=check(pre,in,inValue+1,inEnd,hm);
        return t;
    }
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer,Integer> hm = new HashMap<>();
        int preIndex=0;
        for(int i=0;i<inorder.length;i++){
            hm.put(inorder[i],i);
        }
        TreeNode root=check(preorder,inorder,0,inorder.length-1,hm);
        return root;
    }
}
