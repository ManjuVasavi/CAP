//Minimum time for spoiling

public class Solution {
    public static class Pair{
        int row;
        int col;
        int time;
        Pair(int row, int col,int time){
            this.row=row;
            this.col=col;
            this.time=time;
        }
    }
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int frscount=0;
        int[][] grid = new int[a][b];
        Queue<Pair> q = new LinkedList<>();
        for(int i=0;i<a;i++){
            for(int j=0;j<b;j++){
                grid[i][j]=sc.nextInt();
            }
        }
        int[][] dupgrid = new int[a][b];
        for(int i=0;i<a;i++){
            for(int j=0;j<b;j++){
                if(grid[i][j]==2){
                    dupgrid[i][j]=2;
                    q.add(new Pair(i,j,0));
                }
                else{
                    dupgrid[i][j]=0;
                }
                if(grid[i][j]==1){
                    frscount++;
                }
            }
        }
        int[] offsetr={-1,0,1,0};
        int[] offsetc={0,1,0,-1};
        int newcount=0;
        int max_time=0;
        while(!q.isEmpty()){
            int r1= q.peek().row;
            int c1 = q.peek().col;
            int t1=q.peek().time;
            max_time=Math.max(max_time,t1);
            q.poll();
            for(int i=0;i<offsetr.length;i++){
                int rv=r1+offsetr[i];
                int cv=c1+offsetc[i];
                if(rv<0 || cv<0 || rv>=grid.length || cv>=grid[0].length || grid[rv][cv]==0 || dupgrid[rv][cv]==2){
                    continue;
                }
                dupgrid[rv][cv]=2;
                newcount++;
                q.add(new Pair(rv,cv,t1+1));
            }
        }
        if(frscount==newcount){
             System.out.println(max_time);
        }
        else{
            System.out.println(-1);
        }
    }
}

//count islands

import java.io.*;
import java.util.*;

public class Solution {
    public static void check(int[][] grid, int r, int c){
        if(r<0 || c<0 || r>=grid.length || c>=grid[0].length || grid[r][c]==0){
            return;
        }
        grid[r][c]=0;
        check(grid, r-1,c);
        check(grid, r+1,c);
        check(grid, r,c-1);
        check(grid, r,c+1);
        check(grid, r-1,c-1);
        check(grid, r+1,c-1);
        check(grid, r-1,c+1);
        check(grid, r+1,c+1);
    }
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int[][] grid = new int[a][b];
        for(int i=0;i<a;i++){
            for(int j=0;j<b;j++){
                grid[i][j]=sc.nextInt();
            }
        }
        int count=0;
        for(int i=0;i<a;i++){
            for(int j=0;j<b;j++){
                if(grid[i][j]==1){
                    count++;
                    check(grid,i,j);
                }
            }
        }
        System.out.println(count);
    }
}

//Breadth first search shortest reach

class Result {
    static List<List<Integer>> adj;
    public static List<Integer> bfs(int n, int m, List<List<Integer>> edges, int s) {
        adj = new ArrayList<>();
        for(int i=0;i<=n;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<m;i++){
            adj.get(edges.get(i).get(0)).add(edges.get(i).get(1));
            adj.get(edges.get(i).get(1)).add(edges.get(i).get(0));
        }
        int[] arr = new int[n+1];
        Arrays.fill(arr,-1);
        arr[s]=0;
        Queue<Integer> q = new LinkedList<>();
        q.add(s);
        List<Integer> l = new ArrayList<>();
        while(!q.isEmpty()){
            int value = q.poll();
            for(int neigh: adj.get(value)){
                //System.out.print(neigh+" ");
                if(arr[neigh]==-1){
                    arr[neigh]=arr[value]+6;
                    //System.out.print(arr[neigh]+" ");
                    q.add(neigh);
                }
            }
        }
        // for(int i=0;i<arr.length;i++){
        //     System.out.println(i+" "+arr[i]);
        // }
        for(int i=1;i<arr.length;i++){
            if(i!=s){
                l.add(arr[i]);
            }
        }
        return l;
    }
}
