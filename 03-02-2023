//Validate binary search tree

class Solution {
    ArrayList<Integer> ar = new ArrayList<>();
    public void check(TreeNode root){
        if(root==null){
            return;
        }
        check(root.left);
        ar.add(root.val);
        check(root.right);
    }
    public boolean isValidBST(TreeNode root) {
        boolean f = true;
        check(root);
        for(int i=1;i<ar.size();i++){
            if(ar.get(i-1)>=ar.get(i))
                 f=false;
        }
        return f;
    }
}

//All elements in two binary search trees

class Solution {
    public void order(TreeNode root,List<Integer> l){
        if(root==null){
            return;
        }
        order(root.left,l);
        l.add(root.val);
        order(root.right,l);
    }
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        //inorder
        List<Integer> l = new LinkedList<>();
        order(root1,l);
        order(root2,l);
        Collections.sort(l);
        return l;
    }
}

//convert BST to greater tree

class Solution {
    //reverse inorder
    int sum=0;
    public void check(TreeNode root){
        if(root==null){
            return;
        }
        check(root.right);
        System.out.println(sum);
        sum+=root.val;
        root.val=sum;
        check(root.left);
    }
    public TreeNode convertBST(TreeNode root) {
        check(root);
        return root;
    }
}

//Two sum IV input is a BST

class Solution {
    ArrayList<Integer> ar = new ArrayList<>();
    public void check(TreeNode root){
        if(root==null){
            return;
        }
        check(root.left);
        ar.add(root.val);
        check(root.right);
    }
    public boolean findTarget(TreeNode root, int k) {
        check(root);
        int low=0, high=ar.size()-1;
        while(low<high){
            if(ar.get(low)+ar.get(high)==k){
                return true;
            }
            else if(ar.get(low)+ar.get(high)>k){
                high-=1;
            }
            else{
                low+=1;
            }
        }
        return false;
    }
}

//Convert sorted list to binary search tree

class Solution {
    List<ListNode> l = new ArrayList<>();
    public TreeNode check(int low, int high){
        if(low>high){
            return null;
        }
        int value = low+(high-low)/2;
        TreeNode tree = new TreeNode(l.get(value).val);
        tree.left = check(low,value-1);
        tree.right = check(value+1,high);
        return tree;
    }
    public TreeNode sortedListToBST(ListNode head) {
        if(head==null){
            return null;
        }
        while(head!=null){
            l.add(head);
            head = head.next;
        }
        return check(0,l.size()-1);
    }
}
