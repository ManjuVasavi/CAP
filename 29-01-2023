//Second minimum of binary tree

class Solution {
    int firstMin = Integer.MAX_VALUE;
    long secondMin = Long.MAX_VALUE;
    int checker=-1;
    public void check(TreeNode root){
        if(root==null){
            return;
        }
        findSecondMinimumValue(root.left);
        if(root.val==Integer.MAX_VALUE){
            checker=root.val;
        }
        if(root.val<firstMin){
            secondMin = firstMin;
            firstMin=root.val;
        }
        if(root.val>firstMin && root.val<secondMin){
            secondMin=root.val;
        }
        findSecondMinimumValue(root.right);
    }
    public int findSecondMinimumValue(TreeNode root) {
        check(root);
        if(secondMin!=Integer.MAX_VALUE || checker==Integer.MAX_VALUE){
            return (int)secondMin;
        }
        else{
            return -1;
        }
    }
}

//Kth smallest element in a BST

class Solution {
    int min = Integer.MIN_VALUE;
    int i=0;
    public void check(TreeNode root, int k){
        if(root==null){
            return;
        }
        kthSmallest(root.left,k);
        i=i+1;
        if(i==k){
            min=root.val;
            return;
        }
        kthSmallest(root.right,k);
    }
    public int kthSmallest(TreeNode root, int k) {
        check(root,k);
        return min;
    }
}

//Find bottom tree left value

class Solution {
    public int findBottomLeftValue(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        int result = 0;
        while(!q.isEmpty()){
            int size=q.size();
            for(int i=1;i<=size;i++){
                TreeNode curr = q.poll();
                if(i==1){
                    result = curr.val;
                }
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
            }
        }
        return result;
    }
}

//Top view of binary tree(geeks for geeks)

class Solution
{
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root)
    {
        class QueueNew{
            int value;
            Node node;
            QueueNew(int value, Node node){
                this.value = value;
                this.node = node;
            }
        }
        ArrayList<Integer> ar = new ArrayList<>();
        if(root==null){
            return ar;
        }
        TreeMap<Integer,Integer> tm = new TreeMap<>();
        Queue<QueueNew> q = new LinkedList<>();
        //parent value and curr root node
        q.add(new QueueNew(0,root));
        while(!q.isEmpty()){
            int size=q.size();
            for(int i=1;i<=size;i++){
                QueueNew curr = q.poll();
                //check whether it is in treemap or not
                if(!tm.containsKey(curr.value)){
                    //curr.value is offset
                    //curr.node.data is that node's value
                    tm.put(curr.value,curr.node.data);
                }
                if(curr.node.left!=null){
                    q.add(new QueueNew(curr.value-1,curr.node.left));
                }
                if(curr.node.right!=null){
                    q.add(new QueueNew(curr.value+1,curr.node.right));
                }
            }
        }
        for(Map.Entry<Integer,Integer> en: tm.entrySet()){
                ar.add(en.getValue());
        }
        return ar;
    }
}
