//subset sums

class Solution{
    public void geeks(int index, int sum, ArrayList<Integer> arr, int N, ArrayList<Integer> res){
        //the resultant sum will come at leaf nodes.
        if(index==N){
            res.add(sum);
            return;
        }
        //considering that element for sum
        geeks(index+1,sum+arr.get(index),arr,N,res);
        //without considering that element
        geeks(index+1,sum,arr,N,res);
    }
    ArrayList<Integer> subsetSums(ArrayList<Integer> arr, int N){
        // create a function which can perform the task of adding sum
        ArrayList<Integer> res = new ArrayList<>();
        geeks(0,0,arr,N,res);
        return res;
    }
}

//combination sum 1

class Solution {
    public void leet(int index, int target, int[] candidates, List<List<Integer>> res, List<Integer> arr){
        if(index==candidates.length){
            if(target==0){
                res.add(new ArrayList<>(arr));
            }
            return;
        }
        if(candidates[index]<=target){
            arr.add(candidates[index]);
            leet(index,target-candidates[index],candidates, res, arr);
            arr.remove(arr.size()-1);
        }
        leet(index+1,target,candidates, res, arr);
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res=new ArrayList<>();
        leet(0,target,candidates,res,new ArrayList<>());
        return res;
    }
}
