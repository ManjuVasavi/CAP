//Symmetric tree(leetcode)
 
class Solution {
    public boolean check(TreeNode root1,TreeNode root2){
       if(root1==null && root2==null){
           return true;
       }
        if((root1==null || root2==null)){
           return false;
       }
       if(root1.val!=root2.val){
           return false;
       }
        return check(root1.left,root2.right) && check(root1.right,root2.left);
    }
    public boolean isSymmetric(TreeNode root) {
        boolean b=check(root.left,root.right);
        return b;
    }
}

//Same tree

class Solution {
    public boolean postorder(TreeNode p, TreeNode q){
        if(p==null && q==null){
            return true;
        }
        if(p==null || q==null){
            return false;
        }
        if(p.val!=q.val){
            return false;
        }
        return postorder(p.left,q.left) && postorder(p.right,q.right);
    }
    public boolean isSameTree(TreeNode p, TreeNode q) {
        boolean b = postorder(p,q);
        return b;
    }
}

//Lowest common ancestor of a binary tree

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null){
            return root;
        }
        TreeNode l = lowestCommonAncestor(root.left,p,q);
        TreeNode r = lowestCommonAncestor(root.right,p,q);
        if(root==p || root==q){
            return root;
        }
        if(l!=null && r!=null){
            return root;
        }
        if(l!=null){
            return l;
        }
        if(r!=null){
            return r;
        }
        return null;
    }
}
