//height of binary tree

class Solution {
    //Function to find the height of a binary tree.
    int height(Node node) 
    {
        if(node==null){
            return 0;
        }
        //postorder
        int l = height(node.left);
        int r = height(node.right);
        return Math.max(l,r)+1;
    }
}

//Finding middle element in a linked list

class Solution
{
    int getMiddle(Node head)
    {
         Node fast = head;
         Node slow = head;
         while(fast.next!=null){
             fast = fast.next;
             if(fast.next!=null){
                 fast = fast.next;
             }
            //  System.out.println(slow.data);
             slow = slow.next;
         }
         return slow.data;
    }
}


//kadanes algorithm

class Solution{

    // arr: input array
    // n: size of array
    //Function to find the sum of contiguous subarray with maximum sum.
    long maxSubarraySum(int arr[], int n){
        long sum=0,max=Integer.MIN_VALUE;
        for(int i=0;i<arr.length;i++){
            sum+=arr[i];
            max=Math.max(max,sum);
            if(sum<0){
                sum=0;
            }
        }
        return max;
    }
    
}

//
