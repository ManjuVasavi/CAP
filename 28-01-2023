//search in a binary search tree

class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        //TreeNode res=null;
        if(root==null){
            return null;
        }
        if(root.val==val){
            return root;
        }
        if(val<root.val){
            return searchBST(root.left,val);
        }
        return searchBST(root.right,val);
    }
}

//Insert into binary search tree

class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        TreeNode newNode = new TreeNode(val);
        TreeNode curr = root;
        TreeNode parent = null;
        if(root==null){
            return newNode;
        }
        while(curr!=null){
            parent = curr;
            if(val<curr.val){
                curr=curr.left;
            }
            else{
                curr = curr.right;
            }
        }
        if(val<parent.val){

            parent.left = newNode;
        }
        else{
            parent.right = newNode;
        }
        return root;
    }
}

//Average of levels in binary tree

class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> l = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        if(root==null){
            return l;
        }
        q.add(root);
        while(!q.isEmpty()){
            int size=q.size();
            double sum=0;
            for(int i=1;i<=size;i++){
                TreeNode curr = q.poll();
                sum+=curr.val;
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
            }
            double d = sum/size;
            l.add(d);
        }
        return l;
    }
}
